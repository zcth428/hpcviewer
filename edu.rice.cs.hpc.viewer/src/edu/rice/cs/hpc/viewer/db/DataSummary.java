package edu.rice.cs.hpc.viewer.db;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.FileChannel.MapMode;
import java.util.Random;

import edu.rice.cs.hpc.data.db.DataCommon;

/*********************************************
 * 
 * Class to handle summary.db file generated by hpcprof
 *
 *********************************************/
public class DataSummary extends DataCommon 
{
	// --------------------------------------------------------------------
	// constants
	// --------------------------------------------------------------------
	
	//private final static String SUMMARY_NAME = "hpctoolkit summary metrics";
	static final private int FLOAT_SIZE   	   = Float.SIZE / Byte.SIZE;
	static final private int INTEGER_SIZE 	   = Integer.SIZE / Byte.SIZE; 
	static final private int METRIC_ENTRY_SIZE = FLOAT_SIZE + INTEGER_SIZE;
	static final public float DEFAULT_METRIC  = 0.0f;
	
	// --------------------------------------------------------------------
	// object variable
	// --------------------------------------------------------------------
	
	long offset_start;
	long offset_size;
	long metric_start;
	long metric_size;
	
	int size_offset;
	int size_metid;
	int size_metval;

	int []cct_table = null;
	
	private RandomAccessFile file;
	private FileChannel channel;

	
	// --------------------------------------------------------------------
	// Public methods
	// --------------------------------------------------------------------
	
	/***
	 *  <p>Opening for data summary metric file</p>
	 * (non-Javadoc)
	 * @see edu.rice.cs.hpc.data.db.DataCommon#open(java.lang.String)
	 */
	@Override
	public void open(final String file)
			throws IOException
	{
		super.open(file);
		
		open_internal(file);
		// fill the cct offset table
		fillOffsetTable(file);
	}
	

	@Override
	/*
	 * (non-Javadoc)
	 * @see edu.rice.cs.hpc.data.db.DataCommon#printInfo(java.io.PrintStream)
	 */
	public void printInfo( PrintStream out)
	{
		super.printInfo(out);
		out.println("Offset start: " + offset_start);
		out.println("Offset size: "  + offset_size);
		
		out.println("metric start: " + metric_start);
		out.println("metric size: "  + metric_size);
		
		out.println("size offset: "  + size_offset);
		out.println("size met id: "  + size_metid);
		out.println("size met val: " + size_metval);
		
		if (cct_table != null) 
		{
			for(int i=0; i<num_cctid; i++)
			{
				int num_metrics = (int) (cct_table[i+1] - cct_table[i]);
				out.format("%4x (%2d) ", cct_table[i], num_metrics);
				if (i % 16 == 15)
				{
					out.println();
				}
			}
			out.println();
			// print random metrics
			for (int i=0; i<15; i++)
			{
				Random r = new Random();
				int cct  = r.nextInt((int) num_cctid);
				out.format("[%5d] ", cct);
				for (int j=0; j<num_metric; j++)
				{
					try {
						float value = getMetric(cct, j);
						out.format(" %4.2e  ", value);
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				out.println();
			}
		}
	}
	
	/******
	 * Retrieve a metric value for a specified cct id and metric id
	 * 
	 * @param cct_id	: cct id scope
	 * @param metric_id : metric ID
	 * 
	 * @return float metric value
	 * @throws IOException
	 */
	public float getMetric(int cct_id, int metric_id) throws IOException
	{
		long offset 	   = (metric_start + cct_table[cct_id]);
		int offset_size    = (int) (cct_table[cct_id+1] - cct_table[cct_id]);
		
		if (offset_size<=0)
			return (float)DEFAULT_METRIC;
		
		long file_length   = file.length();
		// make sure the offset is within the file range
		if (file_length > offset)
		{
			file.seek(offset);
			byte []metric_byte = new byte[offset_size];
			
			file.readFully(metric_byte);
			ByteBuffer buffer = ByteBuffer.wrap(metric_byte);
			
			int num_metrics   = offset_size / METRIC_ENTRY_SIZE; 
			
			for(int i=0; i<num_metrics; i++)
			{
				int my_metric_id = buffer.getInt();
				float metric_val = buffer.getFloat();
				
				if (my_metric_id == metric_id) {
					return metric_val;
				}
			}
		}
		return DEFAULT_METRIC;
	}
	
	// --------------------------------------------------------------------
	// Private methods
	// --------------------------------------------------------------------
	
	private void fillOffsetTable(final String filename)
			throws IOException
	{
		// map all the table into memory. 
		// This statement can be problematic if the offset_size is huge
		
		MappedByteBuffer mappedBuffer = channel.map(MapMode.READ_ONLY, offset_start, offset_size);
		LongBuffer longBuffer = mappedBuffer.asLongBuffer();
		
		cct_table = new int[(int) num_cctid+1];
		
		for (int i=0; i<=num_cctid; i++)
		{
			cct_table[i] = (int) longBuffer.get(i);
		}
	}
	
	
	// --------------------------------------------------------------------
	// Protected methods
	// --------------------------------------------------------------------
	
	@Override
	protected boolean isTypeFormatCorrect(long type) {
		return type==1;
	}

	@Override
	protected boolean isFileHeaderCorrect(String header) {
		// suggestion from Mark: ignore the header file name
		return true; //header.startsWith(SUMMARY_NAME);
	}

	@Override
	protected boolean readNext(FileChannel input) 
			throws IOException
	{
		ByteBuffer buffer = ByteBuffer.allocate(256);
		int numBytes      = input.read(buffer);
		if (numBytes > 0) 
		{
			buffer.flip();
			
			offset_start = buffer.getLong();
			offset_size  = buffer.getLong();
			metric_start = buffer.getLong();
			metric_size  = buffer.getLong();
			
			size_offset  = buffer.getInt();
			size_metid   = buffer.getInt();
			size_metval  = buffer.getInt();
		}		
		return false;
	}

	/*
	 * (non-Javadoc)
	 * @see edu.rice.cs.hpc.data.db.DataCommon#dispose()
	 */
	public void dispose() throws IOException
	{
		channel.close();
		file.close();
	}
	// --------------------------------------------------------------------
	// Private methods
	// --------------------------------------------------------------------
	
	private void open_internal(String filename) throws FileNotFoundException
	{
		file 	= new RandomAccessFile(filename, "r");
		channel = file.getChannel();
	}

	/***************************
	 * unit test 
	 * 
	 * @param argv
	 ***************************/
	public static void main(String []argv)
	{
		final String filename = "/home/la5/data/new-database/db-lulesh-new/summary.db";
		final DataSummary summary_data = new DataSummary();
		try {
			summary_data.open(filename);			
			summary_data.printInfo(System.out);
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
