package edu.rice.cs.hpc.viewer.db;

import java.io.IOException;
import java.io.PrintStream;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.FileChannel.MapMode;

import edu.rice.cs.hpc.data.db.DataCommon;

/*********************************************
 * 
 * Class to handle summary.db file generated by hpcprof
 *
 *********************************************/
public class DataSummary extends DataCommon 
{
	// --------------------------------------------------------------------
	// constants
	// --------------------------------------------------------------------
	
	//private final static String SUMMARY_NAME = "hpctoolkit summary metrics";
	
	// --------------------------------------------------------------------
	// object variable
	// --------------------------------------------------------------------
	
	long offset_start;
	long offset_size;
	long metric_start;
	long metric_size;
	
	int size_offset;
	int size_metid;
	int size_metval;

	long []cct_table = null;
	
	// --------------------------------------------------------------------
	// Public methods
	// --------------------------------------------------------------------
	
	/*
	 * (non-Javadoc)
	 * @see edu.rice.cs.hpc.data.db.DataCommon#open(java.lang.String)
	 */
	@Override
	public void open(final String file)
			throws IOException
	{
		super.open(file);
		
		// fill the cct offset table
		fillOffsetTable(file);
	}
	

	@Override
	/*
	 * (non-Javadoc)
	 * @see edu.rice.cs.hpc.data.db.DataCommon#printInfo(java.io.PrintStream)
	 */
	public void printInfo( PrintStream out)
	{
		super.printInfo(out);
		out.println("Offset start: " + offset_start);
		out.println("Offset size: "  + offset_size);
		
		out.println("metric start: " + metric_start);
		out.println("metric size: "  + metric_size);
		
		out.println("size offset: "  + size_offset);
		out.println("size met id: "  + size_metid);
		out.println("size met val: " + size_metval);
		
		if (cct_table != null) 
		{
			for(int i=0; i<num_cctid; i++)
			{
				out.format("%4x ", cct_table[i]);
				if (i % 16 == 15)
				{
					out.println();
				}
			}
		}
	}
	
	// --------------------------------------------------------------------
	// Private methods
	// --------------------------------------------------------------------
	
	private void fillOffsetTable(final String filename)
			throws IOException
	{
		final RandomAccessFile file = new RandomAccessFile(filename, "r");
		final FileChannel channel   = file.getChannel();
		
		// map all the table into memory. 
		// This statement can be problematic if the offset_size is huge
		
		MappedByteBuffer mappedBuffer = channel.map(MapMode.READ_ONLY, offset_start, offset_size);
		LongBuffer longBuffer = mappedBuffer.asLongBuffer();
		
		cct_table = new long[(int) num_cctid];
		
		for (int i=0; i<num_cctid; i++)
		{
			cct_table[i] = longBuffer.get(i);
		}

		channel.close();
		file.close();
	}
	
	
	
	// --------------------------------------------------------------------
	// Protected methods
	// --------------------------------------------------------------------
	
	@Override
	protected boolean isTypeFormatCorrect(long type) {
		return type==1;
	}

	@Override
	protected boolean isFileHeaderCorrect(String header) {
		// suggestion from Mark: ignore the header file name
		return true; //header.startsWith(SUMMARY_NAME);
	}

	@Override
	protected boolean readNext(FileChannel input) 
			throws IOException
	{
		ByteBuffer buffer = ByteBuffer.allocate(256);
		int numBytes      = input.read(buffer);
		if (numBytes > 0) 
		{
			buffer.flip();
			
			offset_start = buffer.getLong();
			offset_size  = buffer.getLong();
			metric_start = buffer.getLong();
			metric_size  = buffer.getLong();
			
			size_offset  = buffer.getInt();
			size_metid   = buffer.getInt();
			size_metval  = buffer.getInt();
		}
		
		return false;
	}


	/***************************
	 * unit test 
	 * 
	 * @param argv
	 ***************************/
	public static void main(String []argv)
	{
		final String filename = "/Users/laksonoadhianto/work/data/new-prof/hpctoolkit-trace-database-32465/summary.db";
		final DataSummary summary_data = new DataSummary();
		try {
			summary_data.open(filename);			
			summary_data.printInfo(System.out);
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
